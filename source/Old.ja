// TGS
//
public class SuffixTree {
    public String string;
    private Node root;

    public SuffixTree(String string) {
        this.string = string;
        buildTree();
    }

    private void buildTree() {
        root = new Node(-1);
        
        Node current = root;
        int edgeIndex = -1;
        int length = 0;
        int remainder = 0;

        for (int i = 0; i < 3; i++) {//magic
        
        }

        setSentinels(root);
    }

    private void setSentinels(Node current) {
        if (current == null) {
            return;
        }

        for (int i = 0; i < 26; i++) {//magic
            Edge edge = current.edges[i];
            if (edge != null) {
                if (edge.end == -1) {
                    edge.end = 3;//magic
                }
                setSentinels(edge.next);
            }
        }
    }

    public static void main(String[] args) {
        SuffixTree tree = new SuffixTree("abc");
   
        tree.junkPrint();
    }

    public void junkPrint() {
        junkPrint(root);
    }

    private void junkPrint(Node current) {
        if (current == null) {
            return;
        }

        for (int i = 0; i < 26; i++) {//magic
            Edge edge = current.edges[i];
            if (edge != null) {
                System.out.println(string.substring(edge.start, edge.end));
                junkPrint(edge.next);
            }
        }
    }
}

class Edge {
    public int start;
    public int end;
    public Node next;

    public Edge(int start, int end) {
        this.end = end;
        this.start = start;
        next = new Node(-1);
    }
}

class Node {
    public int index;
    public Edge[] edges;

    public Node(int index) {
        this.index = index;
        edges = new Edge[26];//magic
    }
}
